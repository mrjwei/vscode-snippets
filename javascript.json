{
  "Print to console": {
    "prefix": "log",
    "body": [
      "console.log('$1');",
      "$2"
    ],
    "description": "Print output to console"
  },
	"Fetch then": {
		"prefix": "fet",
		"body": [
			"fetch($1)",
			"\t.then(res => res.json())",
			"\t.then(${2:data} => $3)$0",
			"\t.catch(err => console.log(err))"
		],
		"description": "my useEffect"
	},
	"Fetch async/await": {
		"prefix": "fet",
		"body": [
			"const res = await fetch($1)",
			"const ${2:data} = await res.json()",
			"try {",
			"\t$0",
			"} catch(err) {",
			"\tconsole.log(err)",
			"}"
		],
		"description": "my useEffect"
	},
	"querySelector": {
		"prefix": "q",
		"body": "document.querySelector('$el')",
		"description": "querySelector"
	},
	"querySelectorAll": {
		"prefix": "qa",
		"body": "document.querySelectorAll('$el')",
		"description": "querySelectorAll"
	},
	"Assign querySelector": {
		"prefix": "aq",
		"body": "const $el = document.querySelector('$el')",
		"description": "Assign element obtained by querySelector to constant"
	},
	"Assign querySelectorAll": {
		"prefix": "aqa",
		"body": "const $els = document.querySelectorAll('$els')",
		"description": "Assign elements obtained by querySelectorAll to constant"
	},
	"preventDefault": {
		"prefix": "pd",
		"body": "e.preventDefault()",
		"description": "Prevent default behaviour"
	},
	"stopPropagation": {
		"prefix": "stop",
		"body": "e.stopPropagation()",
		"description": "stopPropagation"
	},
	"Axios request": {
		"prefix": "ax",
		"body": [
			"axios.${1|get,post,put,delete|}(",
      "'${2:path}',",
      ").then(res => {",
      "\t\t$0",
      "}).catch(err => {",
      "\t\t$3",
      "})"
		],
		"description": "Axios get"
	},
	"Function defining": {
		"prefix": "ff\t",
		"body": [
			"const ${1:name} = (${3:args}) => {",
			"\t$2$0",
			"}"
		],
		"description": "Function defining"
	},
  "Async Function defining": {
		"prefix": "aff\t",
		"body": "const ${1:name} = async (${3:args}) => {}",
		"description": "Async Function defining"
	},
  "Anonymous Arrow Function": {
		"prefix": "arrow\t",
		"body": "($2) => {$1$0}",
		"description": "Anonymous Arrow Function"
	},
	"Event value": {
		"prefix": "etv",
		"body": "e.target.value",
		"description": "Event value"
	},
	"Backticks": {
		"prefix": "`",
		"body": [
			"`",
			"\t$1",
			"`;"
		],
		"description": "Backticks"
	},
	"Start tag only": {
		"prefix": "/",
		"body": "<$1 />",
		"description": "Start tag only"
	},
  "Export function": {
    "prefix": "exf",
    "body": [
      "export const ${1:function} = (${3:args}) => {",
      "\t$2",
      "}"
    ],
    "description": "Export function"
  },
  "Export module": {
    "prefix": "me",
    "body": [
      "module.exports = {",
      "\t$1",
      "}"
    ],
    "description": "Export module"
  },
  "Test Boilerplate": {
    "prefix": "dit",
    "body": [
      "describe('${1:TestSuiteName}', () => {",
      "\t$3",
      "\tit('${2:TestCaseName}', () => {",
      "\t\t$0",
      "\t})",
      "})"
    ]
  }
}
